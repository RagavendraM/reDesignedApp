package com.example.mragavendra.firebasemessage;

import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import com.example.mragavendra.firebasemessage.Model.User;
import com.google.android.gms.auth.api.signin.GoogleSignIn;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInClient;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseException;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;
import com.google.firebase.auth.PhoneAuthCredential;
import com.google.firebase.auth.PhoneAuthProvider;

import java.util.concurrent.TimeUnit;

public class LoginActivity extends AppCompatActivity {

	EditText editTextMobile;
	Button buttonContinue;
	String phoneNumber;
	String mVerificationId;
	private static final int REQ_SIGNIN = 100;

	private GoogleSignInClient mGoogleSignInClient;

	//firebase auth object
	public FirebaseAuth mAuth;

	@Override
	protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == REQ_SIGNIN){
			Task<GoogleSignInAccount> task = GoogleSignIn.getSignedInAccountFromIntent(data);
			try{
				GoogleSignInAccount account = task.getResult(ApiException.class);
				firebaseAuth(account);

			}catch (Exception e){

			}
		}
	}

	private void firebaseAuth(GoogleSignInAccount account) {
		AuthCredential credential = GoogleAuthProvider.getCredential(account.getIdToken(),null);
		mAuth = FirebaseAuth.getInstance();
		mAuth.signInWithCredential(credential)
				.addOnCompleteListener(new OnCompleteListener<AuthResult>(){
					@Override
					public void onComplete(@NonNull Task<AuthResult> task) {
						if(task.isSuccessful()){
							User.getInstance().mail = mAuth.getCurrentUser().getEmail();
						}
					}
				});
	}

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_login);

		editTextMobile = findViewById(R.id.editTextMobile);
		buttonContinue = findViewById(R.id.buttonContinue);
		findViewById(R.id.signInButton).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				signIn();
			}
		});

		GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
										.requestIdToken(getString(R.string.default_web_client_id))
										.requestEmail()
										.build();

		mGoogleSignInClient = GoogleSignIn.getClient(this,gso);



		buttonContinue.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				phoneNumber = editTextMobile.getText().toString().trim();
				if (checkNumberValidity(phoneNumber)) {
//					showProgressDialog();
					phoneNumber = "+91" + phoneNumber;
					sendVerificationCode(phoneNumber);
				} else {
					editTextMobile.setError("Enter Valid Mobile Number");
					editTextMobile.requestFocus();
				}
			}
		});
	}

	private void signIn() {
		Intent signInIntent = mGoogleSignInClient.getSignInIntent();
		startActivityForResult(signInIntent,REQ_SIGNIN);
	}

	private void sendVerificationCode(String phoneNumber) {
		PhoneAuthProvider.getInstance().verifyPhoneNumber(
				phoneNumber,
				60,
				TimeUnit.SECONDS,
				this,
				mCallBacks);
	}

	private PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallBacks = new PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
		@Override
		public void onVerificationCompleted(PhoneAuthCredential phoneAuthCredential) {

			String code = phoneAuthCredential.getSmsCode();
			verifyCode(code);

		}

		@Override
		public void onVerificationFailed(FirebaseException e) {
			Toast.makeText(LoginActivity.this, e.getMessage(), Toast.LENGTH_LONG).show();
		}

		@Override
		public void onCodeSent(String s, PhoneAuthProvider.ForceResendingToken forceResendingToken) {
			super.onCodeSent(s, forceResendingToken);
			mVerificationId = s;

		}
	};

	private void verifyCode(String code) {
		//creating the credential
		PhoneAuthCredential credential = PhoneAuthProvider.getCredential(mVerificationId, code);

		//signing the user
		signInwithCredential(credential);
	}

	public void signInwithCredential(PhoneAuthCredential credential) {
		mAuth = FirebaseAuth.getInstance();
		mAuth.signInWithCredential(credential)
				.addOnCompleteListener(LoginActivity.this, new OnCompleteListener<AuthResult>() {
					@Override
					public void onComplete(@NonNull Task<AuthResult> task) {
						if (task.isSuccessful()) {
//							hideProgressDialog();
							FirebaseUser user = task.getResult().getUser();
							User.getInstance().phoneNumber = user.getPhoneNumber();
							Intent intent = new Intent(LoginActivity.this, MainActivity.class);
							intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
							startActivity(intent);
						} else {

							//verification unsuccessful.. display an error message

							String message = "Somthing is wrong, we will fix it soon...";

							if (task.getException() instanceof FirebaseAuthInvalidCredentialsException) {
								message = "Invalid code entered...";
							}


						}
					}
				});
	}

	@Override
	protected void onStart() {
		super.onStart();
		FirebaseUser user = mAuth.getCurrentUser();
		if (user != null) {
			Intent intent = new Intent(LoginActivity.this, MainActivity.class);
			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
			startActivity(intent);
		}
	}

	private boolean checkNumberValidity(String phoneNumber) {
		if (!phoneNumber.isEmpty() && phoneNumber.length() == 10) {
			return true;
		}
		return false;
	}
}

